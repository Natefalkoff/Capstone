@model Capstone.Web.Models.RecipeModel

@{
    ViewBag.Title = "AddRecipe";
}

<h2 id="title" style="padding-top:60px">Add Recipe</h2>

@using (Html.BeginForm("AddRecipe", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @*<h4 class="addrecipe">RecipeModel</h4>*@
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Enter Directions Separated by Spaces and Vertical Bar ( | )", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.Directions, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(model => model.Directions, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Enter Ingredients Separated by Spaces and Vertical Bar ( | )", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.Ingredients, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(model => model.Ingredients, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            <h4>Enter Tags Separated by Semi-Colon (;)</h4>
            @Html.Label("Enter Tags Here", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Tags, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })*@
            </div>
        </div>
        @{ 
            List<SelectListItem> listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem
            {
                Text = "Private",
                Value = "0"
            });
            listItems.Add(new SelectListItem
            {
                Text = "Public",
                Value = "1"
            });
            @Html.DropDownListFor(Model => Model.PublicOrPrivate, listItems)
        }
        @*<div>
            <select id="@Model.Publics" name="@Model.Publics">
                Would You Like This Recipe To Be Public Or Private
                <option value= "0">Private</option>
                <option value= "1">Public</option>
            </select>
        </div>*@
        @{
            //Dictionary<string, bool> chosenCats = new Dictionary<string, bool>();
            //List<string> cat = ViewBag.Categories as List<string>;
            //foreach(string s in cat)
            //{
            //    chosenCats.Add(s, false);
            //}
            List<string> catString = new List<string>();
            foreach (var kvp in Model.ChoseCategory)
            {
                @*<input class="checkbox" type="checkbox" name="@kvp.Key" />
                <label class="categoryLabel" for=""*@

                @Html.HiddenFor(Model => Model.ChoseCategory.Keys)
                @Html.Label(kvp.Key)
                @Html.CheckBoxFor(Model => Model.ChoseCategory[kvp.Key], false)

            }
            @*for(int i = 0; i < catString.Count; i++)
            {
                @Html.HiddenFor(m => m.ChoseCategory[catString[i]])
                @Html.Label(catString[i])
                @Html.CheckBoxFor(m =)
            }*@

        }

        <div>
            @Html.Label("ImageName", "Upload an Image")
            @Html.TextBoxFor(m => m.ImageName, new { type = "file" })<br />
            
            @ViewBag.Message
        </div>
        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
            }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
